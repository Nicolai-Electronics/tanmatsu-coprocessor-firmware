/*
volatile uint8_t i2c_address;

volatile uint8_t* i2c_read_buffer;
volatile uint8_t i2c_read_position;
volatile uint8_t i2c_read_size;
volatile uint8_t i2c_read_busy;

volatile uint8_t i2c_send_buffer[64];
volatile uint8_t i2c_send_position;
volatile uint8_t i2c_send_size;
volatile uint8_t i2c_send_busy;
volatile uint8_t i2c_failed;

void SetupI2CMaster() {
    // Enable I2C2
    RCC->APB1PCENR |= RCC_APB1Periph_I2C2;
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO;

    // Reset I2C2 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C2;
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C2;

    I2C2->CTLR1 |= I2C_CTLR1_SWRST;
    I2C2->CTLR1 &= ~I2C_CTLR1_SWRST;

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C2->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C2->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    //I2C2->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C2->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Enable interrupts
    I2C2->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    NVIC_EnableIRQ(I2C2_EV_IRQn); // Event interrupt
    NVIC_SetPriority(I2C2_EV_IRQn, 2 << 4);
    NVIC_EnableIRQ(I2C2_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C2_ER_IRQn, 2 << 4);

    // Configure address
    I2C2->OADDR1 = 0;
    I2C2->OADDR2 = 0;

    // Enable I2C
    I2C2->CTLR1 |= I2C_CTLR1_PE;

    i2c_send_busy = 0;
    i2c_read_busy = 0;
    i2c_failed = 0;
}

void pm_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint8_t size) {
    // wait for previous packet to finish
    while(i2c_send_busy || i2c_read_busy);

    // Mark I2C as busy
    i2c_send_busy = 1;
    i2c_read_busy = 0;
    i2c_failed = 0;

    // disable reading
    i2c_read_size = 0;
    i2c_read_position = 0;

    // init buffer for sending
    i2c_send_size = size + 1;
    i2c_send_position = 0;
    i2c_send_buffer[0] = reg;
    i2c_address = address;
    memcpy((uint8_t *)&i2c_send_buffer[1], data, size);

    // Transmit
    printf("Transmitting\r\n");
    I2C2->CTLR1 |= I2C_CTLR1_START;
    while(i2c_send_busy);
    printf("**********************\r\n");
    Delay_Ms(10);
}

void pm_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t size) {
    // wait for previous packet to finish
    while(i2c_send_busy || i2c_read_busy);

    i2c_read_buffer = data;

    // Mark I2C as busy
    i2c_send_busy = 1;
    i2c_read_busy = 1;
    i2c_failed = 0;

    // prepare reading
    //printf("Will read %u bytes\r\n", size);
    i2c_read_size = size;
    i2c_read_position = 0;

    // init buffer for sending
    i2c_send_size = 1;
    i2c_send_position = 0;
    i2c_send_buffer[0] = reg;

    i2c_address = address;

    // Transmit
    printf("Receiving\r\n");
    I2C2->CTLR1 |= I2C_CTLR1_START;
    while(i2c_send_busy | i2c_read_busy);
    printf("**********************\r\n");
    Delay_Ms(10);
}

void I2C2_EV_IRQHandler(void) __attribute__((interrupt));
void I2C2_EV_IRQHandler(void) {
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C2->STAR1;
    STAR2 = I2C2->STAR2;

    printf("E %04X %04X\r\n", STAR1, STAR2);

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
        I2C2->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
        return;
    }

    if (STAR1 & I2C_STAR1_SB) {
        // Start of transmission (EVT5)
        if (i2c_send_busy) {
            I2C2->DATAR = i2c_address << 1;
        } else if (i2c_read_busy) {
            I2C2->DATAR = (i2c_address << 1) | 0x01;
            I2C2->CTLR1 |= I2C_CTLR1_ACK; // Enable ACK
        }
    }

    if (STAR1 & I2C_STAR1_ADDR) {
        // Address transmission finished (EVT6)
       i2c_send_position = 0;
       i2c_read_position = 0;
    }

    if (STAR1 & I2C_STAR1_BTF) { // Byte transmission finished
        if (i2c_send_position >= i2c_send_size && i2c_send_busy) {
            if (!i2c_read_busy) {
                // Send STOP at end of transmission
                I2C2->CTLR1 |= I2C_CTLR1_STOP;
            } else {
                // Send repeated START at end of transmission
                I2C2->CTLR1 |= I2C_CTLR1_START;
            }
            i2c_send_busy = 0;
        } else if (i2c_read_position >= (i2c_read_size - 1) && i2c_read_busy) {
            I2C2->CTLR1 &= ~(I2C_CTLR1_ACK); // Disable ACK
            // Send STOP at end of transmission
            I2C2->CTLR1 |= I2C_CTLR1_STOP;
            i2c_read_busy = 0;
        }
    }

    if(STAR1 & I2C_STAR1_TXE) {
        // Send data if available (EVT8_1)
        if(i2c_send_position < i2c_send_size) {
            I2C2->DATAR = i2c_send_buffer[i2c_send_position];
            i2c_send_position++;
        }
    }

    if (STAR1 & I2C_STAR1_RXNE) {
        // Receive available data
        if (i2c_read_position < i2c_read_size) {
            i2c_read_buffer[i2c_read_position] = I2C2->DATAR;
            i2c_read_position++;
            if (i2c_read_position >= (i2c_read_size - 1)) {
                // Disable ACK
                I2C2->CTLR1 &= ~(I2C_CTLR1_ACK); // Disable ACK
                I2C2->CTLR1 |= I2C_CTLR1_STOP; // Send STOP
            }
        }
    }
}

void I2C2_ER_IRQHandler(void) __attribute__((interrupt));
void I2C2_ER_IRQHandler(void) {
    uint16_t STAR1 = I2C2->STAR1;

    //printf("I2C error %04x\r\n", STAR1);

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
        I2C2->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
        i2c_failed = true;
        i2c_send_busy = false;
        i2c_read_busy = false;
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
        I2C2->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
        i2c_failed = true;
        i2c_send_busy = false;
        i2c_read_busy = false;
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
        I2C2->STAR1 &= ~(I2C_STAR1_AF); // Clear error
        i2c_failed = true;
        i2c_send_busy = false;
        i2c_read_busy = false;
    }
}
*/